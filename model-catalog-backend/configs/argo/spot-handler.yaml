apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: spot-instance-recovery
  namespace: gpu-workloads
  labels:
    app: llm-benchmarking
    component: spot-handler

spec:
  # Run every 30 minutes
  schedule: "*/30 * * * *"
  
  # Keep last 5 workflow runs
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 3
  
  # Don't run if previous job still running
  concurrencyPolicy: "Forbid"
  
  # Workflow template
  workflowSpec:
    entrypoint: reset-stale-configs
    
    templates:
    - name: reset-stale-configs
      container:
        image: python:3.11-slim
        command: [sh, -c]
        args:
        - |
          pip install -q requests &&
          python - <<'EOF'
          import requests
          import sys
          
          API_URL = "http://model-catalog-api:8000"
          TIMEOUT_MINUTES = 120  # 2 hours
          
          try:
              print("üîÑ Resetting stale running configs...")
              
              response = requests.post(
                  f"{API_URL}/api/v1/workflow/maintenance/reset-stale",
                  params={"timeout_minutes": TIMEOUT_MINUTES},
                  timeout=60
              )
              response.raise_for_status()
              
              result = response.json()
              
              print(f"‚úÖ {result['message']}")
              print(f"   Configs reset: {result['configs_reset']}")
              
              if result['configs_reset'] > 0:
                  print(f"\n‚ö†Ô∏è  {result['configs_reset']} configs were stuck in 'running' status")
                  print(f"   This likely indicates spot instance interruptions")
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              sys.exit(1)
          EOF
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Alternative: Kubernetes CronJob (if not using Argo CronWorkflow)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: spot-instance-recovery-cronjob
  namespace: gpu-workloads
  labels:
    app: llm-benchmarking
    component: spot-handler

spec:
  # Run every 30 minutes
  schedule: "*/30 * * * *"
  
  # Don't start new job if previous still running
  concurrencyPolicy: Forbid
  
  # Keep last 3 successful jobs
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  
  jobTemplate:
    spec:
      # Retry once if fails
      backoffLimit: 1
      
      template:
        metadata:
          labels:
            app: llm-benchmarking
            component: spot-handler
        
        spec:
          restartPolicy: OnFailure
          
          containers:
          - name: reset-stale
            image: python:3.11-slim
            command: [sh, -c]
            args:
            - |
              pip install -q requests &&
              python - <<'EOF'
              import requests
              import sys
              from datetime import datetime
              
              API_URL = "http://model-catalog-api:8000"
              TIMEOUT_MINUTES = 120
              
              print(f"[{datetime.now().isoformat()}] Starting spot instance recovery...")
              
              try:
                  response = requests.post(
                      f"{API_URL}/api/v1/workflow/maintenance/reset-stale",
                      params={"timeout_minutes": TIMEOUT_MINUTES},
                      timeout=60
                  )
                  response.raise_for_status()
                  
                  result = response.json()
                  
                  print(f"‚úÖ Success: {result['message']}")
                  print(f"   Configs reset: {result['configs_reset']}")
                  
                  if result['configs_reset'] > 0:
                      print(f"\n‚ö†Ô∏è  WARNING: {result['configs_reset']} stale configs detected")
                      print(f"   Consider investigating spot instance stability")
                  else:
                      print(f"   No stale configs found - system healthy")
                  
                  print(f"\n[{datetime.now().isoformat()}] Completed successfully")
                  
              except requests.exceptions.RequestException as e:
                  print(f"‚ùå HTTP Error: {e}")
                  sys.exit(1)
              except Exception as e:
                  print(f"‚ùå Unexpected Error: {e}")
                  import traceback
                  traceback.print_exc()
                  sys.exit(1)
              EOF
            
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            
            env:
            - name: PYTHONUNBUFFERED
              value: "1"
