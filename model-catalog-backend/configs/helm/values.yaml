# Model Catalog API Deployment Configuration

replicaCount: 3

image:
  repository: model-catalog-api
  pullPolicy: IfNotPresent
  tag: "latest"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations: {}

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "50"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.model-catalog.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: model-catalog-tls
      hosts:
        - api.model-catalog.example.com

resources:
  requests:
    cpu: 1000m
    memory: 2Gi
  limits:
    cpu: 2000m
    memory: 4Gi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 75
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - model-catalog-api
        topologyKey: kubernetes.io/hostname

# Application configuration
config:
  appName: "Model Catalog Backend"
  version: "0.1.0"
  debug: "false"
  apiV1Str: "/api/v1"
  
  # Database
  databaseHost: "postgresql.data-storage.svc.cluster.local"
  databasePort: "5432"
  databaseName: "model_catalog"
  
  # Redis
  redisHost: "redis.model-catalog.svc.cluster.local"
  redisPort: "6379"
  
  # CORS
  corsOrigins: '["http://localhost:3000","http://localhost:8080","https://api.example.com"]'
  
  # Performance
  workers: "4"
  maxConnections: "100"
  poolSize: "20"
  
  # Logging
  logLevel: "info"
  logFormat: "json"

# Secrets (use External Secrets in production)
secrets:
  databaseUser: "model_catalog_user"
  databasePassword: "CHANGE_ME_IN_PRODUCTION"
  secretKey: "CHANGE_ME_IN_PRODUCTION_USE_STRONG_KEY"
  redisPassword: "CHANGE_ME_IN_PRODUCTION"

# Health checks
livenessProbe:
  httpGet:
    path: /api/v1/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /api/v1/health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /api/v1/health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 30
